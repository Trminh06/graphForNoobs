#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e4+1;
long n,m,bridge = 0,num[maxn],low[maxn],cnt = 0;
vector <int> a[maxn];
bool joint[maxn];
void inp(){
    cin >> n >> m;
    int u,v;
    for(int i = 0; i < m; ++i){
        cin >> u >> v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    for(int i = 1; i <= n; ++i)
        low[i] = LONG_MAX;
}
void Tarjan(int u,int p){
    int child = 0;
    num[u] = low[u] = ++cnt;
    for(auto v:a[u]){
        if (v != p){
            if (num[v])
                low[u] = min(low[u],num[v]);
            else{
                Tarjan(v,u);
                child++;
                low[u] = min(low[u],low[v]);
                if (low[v] >= num[v])
                    bridge++;
                if (u == p){
                    if (child >= 2)
                        joint[u] = true;
                } else
                    if (low[v] >= num[u])
                        joint[u] = true;
            }
        }
    }
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    inp();
    for(int i = 1; i <= n; ++i){
        if (!num[i])
            Tarjan(i,i);
    }
    cout << "\n";
    int cnt = 0;
    for(int i = 1; i <= n; ++i)
        if (joint[i])
            cnt++;
    cout << cnt << " " << bridge << "\n";
    return 0;
}


